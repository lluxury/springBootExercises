
// 异常统一处理的使用场景
// 运行 springboot-validation-over-json 工程
// springboot-validation-over-json 工程代码详解


// 异常统一处理的使用场景
// 在前后端分离开发中，经常用 HTTP over JSON 作为服务进行前后端联调对接
// 前后端之间利用轻量级协议对接耦合
// 后端给出 api 文档 -> 前端根据文档，mock出数据开发 ；同时，后端实现业务逻辑
// 微服务


// HTTP over JSON 形式中很多涉及到返回码，错误码相关的处理
// 比如xxx参数不完整，权限不足，用户不存在等

// Spring 4.x 提供的 RestControllerAdvice
 // HTTP over JSON 模式，利用RestControllerAdvice ，控制层通知器
 // 用于统一拦截异常，进行响应处理

 // 工作模式
HTTP        上浮            捕获异常
    RestControllerAdvice -> 异常统一处理
                            分别处理
    Controller
    Service
    Dao


// 运行




// 控制层通知器
// 响应码设计



pom.xml
// web

City.java
// bean

ErrorInfoInterface
// 先写错误接口
    String getCode();
    String getMessage();

GlobalErrorInfoException 
 // 统一错误码异常
 // 类实例
 // 获取错误信息
 // 设置错误信息

GlobalErrorInfoEnum
// 应用系统级别的错误码
 // 枚举,枚举方法,2个方法?

 ResultBody
  // 返回体
// 有方法重载啊,第一次没注意到,就凉了
 // 虽然之前就知道,不过很少用

GlobalErrorInfoHandler
// 统一错误码异常处理

@ExceptionHandler 注解，
标记了使用 errorHandlerOverJson() 方法来处理 GlobalErrorInfoException 异常

@RestControllerAdvice 是 @ControllerAdvice 和 @ResponseBody 的语义结合
是控制器增强，直接返回对象。这里用于统一拦截异常，然后返回错误码对象体

@ResponseBody 作用： 该注解用于将 Controller 的方法返回的对象，
通过适当的 HttpMessageConverter 转换为指定格式后，写入到 Response 对象的 body 数据区

constant
  CityErrorInfoEnum 
// 业务错误码 案例

ErrorJsonController 


// 枚举类
package enumcase;

public enum SeasonEnum {
    SPRING,SUMMER,FALL,WINTER;
}




// 定义属性和方法
public enum SeasonEnum {
    SPRING("春天"),SUMMER("夏天"),FALL("秋天"),WINTER("冬天");
    
    private final String name;
    
    private SeasonEnum(String name)
    {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}



// 实现接口
package enumcase;

public enum Operation {
    PLUS{

        @Override
        public double eval(double x, double y) {
            return x + y;
        }
        
    },
    MINUS{

        @Override
        public double eval(double x, double y) {
            return x - y;
        }
        
    }

};
    
    /**
     * 抽象方法，由不同的枚举值提供不同的实现。
     * @param x
     * @param y
     * @return
     */
    public abstract double eval(double x, double y);
    
    public static void main(String[] args) {
        System.out.println(Operation.PLUS.eval(10, 2));
        System.out.println(Operation.MINUS.eval(10, 2));
    }
}


// 追踪
ErrorJsonController 
 // 获取 /api/city后面的参数

 // 正常, 返回信息 -> ResultBody 返回体 -> Cityp

 // 异常, 抛异常
// 抛 GlobalErrorInfoException , 枚举 CityErrorInfoEnum

constant
    CityErrorInfoEnum -> PARAMS_NO_COMPLETE
// 返回 code message

GlobalErrorInfoException -> getErrorInfo -> ErrorInfoInterface //接口

// 还是理不清楚,需要梳理

// 错误码枚举?
// 错误码接口，全局错误码枚举和各个业务错误码枚举去实现接口
                        Comparable Serializable

ErrorJsonController             Enum,declaringClass

CityErrorInfoEnum   GlobalErrorInfoEnum

